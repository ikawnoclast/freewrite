#!/bin/bash

#
# freewrite
#
#	A script to simple the freewriting process.
#

umask 022

# load user configuration file
config_file="$HOME/.freewriterc"
if [ -r $config_file ]; then
	source $config_file
else
	echo "$0: $config_file does not exist. Exiting"
	exit 1
fi

# determine script storage directory
_source="${BASH_SOURCE[0]}"
while [ -h "$_source" ] ; do _source="$(readlink "$_source")"; done
_script_dir="$( cd -P "$( dirname "$_source" )" && pwd )"

# parse command line arguments and set modes of operation
_safe_mode="no"
_debug_mode="no"
while getopts ":hs" opt; do
	case $opt in
		h)
		echo "$0 [-h] [-s]" >&2
		echo -e "\t-h\tThis help message." >&2
		echo -e "\t-s\tSafe mode. Does not use any functions." >&2
		echo -e "\t-d\tDebug mode. Provides additional output." >&2
		exit 0
		;;
		s)
		_safe_mode="yes"
		;;
		d)
		_debug_mode="yes"
		;;
		\?)
      	echo "Invalid option: -$OPTARG" >&2
      	;;
  	esac
done

_execute_function_list () {
	[ $_safe_mode == "yes" ] && return
	local ext_function_list="$1"

	for ext_function in $ext_function_list; do
		$ext_function
		if [ $? -ne 0 ]; then
			echo "$0: $ext_function returned an error. Exiting."
			exit 1
		fi
	done
}

_load_external_functions () {
	[ $_safe_mode == "yes" ] && return
	local function_types="before during after"
	
	for function_type in $function_types; do
		for ext_function_file in $_script_dir/${function_type}_* ; do
			[ -r $ext_function_file ] && source $ext_function_file
		done
	done
}

_terminate_bg_jobs () {
	for job in $(jobs -p); do 
		kill $job 2> /dev/null
	done
}

# kill any background jobs exiting on various signals
trap "_terminate_bg_jobs" EXIT QUIT HUP INT

# load all external functions from their respective files
_load_external_functions

# execute the functions for operations to be conducted before and during the
#  free write session
_execute_function_list "$before_function_list"
_execute_function_list "$during_function_list"

# save the state of specific options into the data file
echo -e "debug_mode: $_debug_mode\nsafe_mode: $_safe_mode" >> $data_file

# find the lines in the session file to put the user in the "right" spot to edit
jump_to=$(wc -l $session_file | awk '{print $1}')

# open an editor with a template and dated filename
$editor +$jump_to $editor_opts $session_file

# run functions after the free write session
_execute_function_list "$after_function_list"

exit 0
